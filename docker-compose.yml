services:
  db:
    image: postgres:18
    container_name: postgres-db
    platform: linux/arm64   # Apple Silicon
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    # 永続化（ボリュームでもホストフォルダでもOK）
    volumes:
      # - ./postgres-data:/var/lib/postgresql/data
      - postgres-data18:/var/lib/postgresql/data
      - ./pgconf/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h 127.0.0.1 -p 5432"]
      interval: 5s
      timeout: 3s
      retries: 5

  web:
    build:
      context: ./src/WebApp
      dockerfile: Dockerfile
    container_name: dotnet9-webapp
    platform: linux/arm64
    depends_on:
      db:
        condition: service_healthy
    environment:
      # WebApp が Program.cs で読む接続文字列（←ここ超重要）
      # Host は "db"（サービス名）、プール/Keepalive は任意
      ConnectionStrings__Default: "Host=db;Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Pooling=true;Keepalive=30;"
      ASPNETCORE_ENVIRONMENT: "Container_Development"
    ports:
      - "9999:8080"   # ホスト5230 -> コンテナ8080（Kestrel）
    restart: unless-stopped
    # 必要に応じてアプリから DB へ初回マイグレーション実行（アプリ内の db.Database.Migrate() でOK）
    # ボリュームを使ってログやアップロードを出したい場合はここに volumes を追加

volumes:
  postgres-data18: {}
