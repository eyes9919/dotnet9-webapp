name: build_and_deploy

on:
  push:
    branches: [ "main", "develop", "feature/**", "chore/**" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  id-token: write

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_NOLOGO: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 9.x
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore
        run: dotnet restore ./src/WebApp/WebApp.csproj

      - name: Build
        run: dotnet build ./src/WebApp/WebApp.csproj -c Release --no-restore

      - name: Test (Integration)
        run: |
          if [ -d "./tests/WebApp.IntegrationTests" ]; then
            dotnet test ./tests/WebApp.IntegrationTests/WebApp.IntegrationTests.csproj -c Release --no-build --logger "trx;LogFileName=test-results.trx"
          else
            echo "No tests project found. Skipping."
          fi

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: "**/TestResults/*.trx"

  deploy:
    needs: build_and_test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    env:
      AWS_REGION:         ${{ secrets.AWS_REGION }}
      ECR_ACCOUNT_ID:     ${{ secrets.ECR_ACCOUNT_ID }}
      COPILOT_APP:        ${{ secrets.COPILOT_APP }}
      COPILOT_ENV:        ${{ secrets.COPILOT_ENV }}
      COPILOT_SERVICE:    ${{ secrets.COPILOT_SERVICE }}
      IMAGE_TAG:          ${{ github.sha }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ECR にビルド・プッシュ（linux/arm64）
      - name: Set up QEMU (for ARM builds)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & push image (linux/arm64)
        working-directory: ./src/WebApp
        run: |
          REPO="${ECR_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/webapp/webapp"
          docker buildx build \
            --platform linux/arm64 \
            -f Dockerfile \
            -t "${REPO}:latest" \
            -t "${REPO}:${IMAGE_TAG}" \
            --push \
            .

      # ★ ここを修正：一時ファイルに落としてから /usr/local/bin に配置
      - name: Install Copilot CLI
        run: |
          set -euo pipefail
          TMP=/tmp/copilot-linux
          curl -sSL -o "${TMP}" https://github.com/aws/copilot-cli/releases/latest/download/copilot-linux
          sudo install -m 0755 "${TMP}" /usr/local/bin/copilot
          copilot --version

      - name: Copilot deploy to Fargate
        env:
          COPILOT_LOG_LEVEL: info
        run: |
          copilot svc deploy \
            --app "${COPILOT_APP}" \
            --name "${COPILOT_SERVICE}" \
            --env "${COPILOT_ENV}" \
            --force

      - name: Output Service URL
        run: |
          copilot svc show -n "${COPILOT_SERVICE}" --json | jq -r '.routes[]?.url // empty'
